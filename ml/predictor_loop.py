# predictor_loop.py ‚Äî –ø–æ—Ç–æ–∫–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–≤–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
# ---------------------------------------------------------------------
# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ sensor_data2,
# –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ vibration_alarm –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ sensor_predictions.

import psycopg2
import pandas as pd
import joblib
from time import sleep

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL ---
db_config = {
    "dbname": "postgres",
    "user": "postgres",
    "password": "postgres",  # <<< –∑–∞–º–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    "host": "localhost",
    "port": 5432
}

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
model = joblib.load("ml/model_rf_alarm.pkl")
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
conn = psycopg2.connect(**db_config)
conn.autocommit = True
cur = conn.cursor()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ—Ç) ---
cur.execute("""
    CREATE TABLE IF NOT EXISTS public.sensor_predictions (
        ts TIMESTAMPTZ NOT NULL,
        vibration DOUBLE PRECISION,
        temperature DOUBLE PRECISION,
        pressure DOUBLE PRECISION,
        predicted_alarm BOOLEAN
    )
""")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
print("üîÅ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
last_ts = None

try:
    while True:
        # --- –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ ---
        df = pd.read_sql("""
            SELECT ts, vibration, temperature, pressure
            FROM public.sensor_data2
            ORDER BY ts DESC
            LIMIT 1
        """, conn)

        if df.empty:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ sensor_data2")
            sleep(5)
            continue

        row = df.iloc[0]
        ts = row["ts"]

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ---
        if ts == last_ts:
            sleep(2)
            continue
        last_ts = ts

        # --- –ü—Ä–æ–≥–Ω–æ–∑ ---
        features = row[["vibration", "temperature", "pressure"]].values.reshape(1, -1)
        pred = model.predict(features)[0]
        print(f"[{ts}] –ü—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–≤–æ–≥–∏: {bool(pred)}")

        # --- –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
        cur.execute("""
            INSERT INTO public.sensor_predictions (ts, vibration, temperature, pressure, predicted_alarm)
            VALUES (%s, %s, %s, %s, %s)
        """, (ts, row["vibration"], row["temperature"], row["pressure"], bool(pred)))

        sleep(2)

except KeyboardInterrupt:
    print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

finally:
    cur.close()
    conn.close()
    print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
