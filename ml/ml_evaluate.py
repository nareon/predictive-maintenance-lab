# ml_evaluate.py ‚Äî –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º
# ---------------------------------------------------------------
# –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç predicted_alarm —Å vibration_alarm,
# –≤—ã—á–∏—Å–ª—è–µ—Ç Precision, Recall, F1 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É model_metrics.

import psycopg2
import pandas as pd
from sklearn.metrics import precision_score, recall_score, f1_score
from datetime import datetime

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL ---
db_config = {
    "dbname": "postgres",
    "user": "postgres",
    "password": "postgres",
    "host": "localhost",
    "port": 5432
}

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ---
conn = psycopg2.connect(**db_config)
conn.autocommit = True
cur = conn.cursor()

# --- –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 200 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ---
query = """
    SELECT p.ts, p.predicted_alarm, s.vibration_alarm
    FROM sensor_predictions p
    JOIN sensor_data2 s ON p.ts = s.ts
    ORDER BY p.ts DESC
    LIMIT 200
"""
df = pd.read_sql(query, conn)

# --- –ú–µ—Ç—Ä–∏–∫–∏ ---
y_true = df["vibration_alarm"].astype(int)
y_pred = df["predicted_alarm"].astype(int)

precision = precision_score(y_true, y_pred, zero_division=0)
recall = recall_score(y_true, y_pred, zero_division=0)
f1 = f1_score(y_true, y_pred, zero_division=0)
ts = datetime.now()

print(f"üìä Precision: {precision:.3f}  Recall: {recall:.3f}  F1: {f1:.3f}")

# --- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ ---
cur.execute("""
    CREATE TABLE IF NOT EXISTS public.model_metrics (
        ts TIMESTAMPTZ NOT NULL,
        precision DOUBLE PRECISION,
        recall DOUBLE PRECISION,
        f1 DOUBLE PRECISION
    )
""")

# --- –ó–∞–ø–∏—Å—å ---
cur.execute("""
    INSERT INTO public.model_metrics (ts, precision, recall, f1)
    VALUES (%s, %s, %s, %s)
""", (ts, precision, recall, f1))

cur.close()
conn.close()
print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ model_metrics")
